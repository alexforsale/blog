#+title: Common Lisp
#+date: <2022-03-20 Sun>
#+author: Kristian Alexander P
#+email: alexforsale@yahoo.com
#+language: en
#+filetags: common-lisp
#+options: d:t
#+startup: overview hideblocks
* DONE Day One                                                        :clisp:
  CLOSED: [2022-03-21 Mon 00:40]
  :PROPERTIES:
  :header-args: :results verbatim :exports both
  :END:
  :LOGBOOK:
  - State "DONE"       from              [2022-03-21 Mon 00:40]
  :END:
** Getting Started                                                     :sbcl:
   :LOGBOOK:
   CLOCK: [2022-03-20 Sun 23:53]--[2022-03-21 Mon 00:47] =>  0:54
   - Done
   :END:
   [[https://en.wikipedia.org/wiki/Steel_Bank_Common_Lisp][Steel Bank Common Lisp]] is supposedly one of many various /lisp/ implementation, which features high-perfomance native compiler, unicode support and threading. On many /linux/ distributions /sbcl/ should be available from their main repositories.
** SBCL REPL
   Stands for *READ*, *EVAL*, *PRINT*, *LOOP*, the interactive interpreter for /SBCL/, out of the box doesn't support arrow keys, also it lacks history. One option is to use =rlwrap= package. Or simply just use =Emacs=.
** Libraries
   Many of the libraries are documented here:
*** [[https://quickdocs.org/][quickdocs]]
*** [[https://github.com/CodyReichert/awesome-cl][awesome-cl]]
*** [[https://www.cliki.net/][cliki]]
** [[https://www.quicklisp.org/beta/][Quicklisp]]
   The package manager, installation is straight-forward once you have /sbcl/ installed.
*** Installing packages via quicklisp
    For example if we want to install =cl-ppcre= (regular expression package):
    #+begin_src lisp
      (ql:quickload "cl-ppcre")
    #+end_src

    #+RESULTS:
    : ("cl-ppcre")
    We can then use this library whenever we needed it.
    #+begin_src lisp
      (require "cl-ppcre")
      (cl-ppcre:regex-replace "fo+" "foo bar" "frob")
    #+end_src

    #+RESULTS:
    : "frob bar"
    : T
*** Configuration management
    These are the locations which the interpreter will look for libraries:
    #+begin_src lisp
      (asdf/source-registry:default-user-source-registry)
    #+end_src

    #+RESULTS:
    : (:SOURCE-REGISTRY (:TREE (:HOME "common-lisp/"))
    :  (:DIRECTORY (:HOME ".sbcl/systems/"))
    :  (:DIRECTORY #P"/home/alexforsale/.local/share/common-lisp/systems/")
    :  (:TREE #P"/home/alexforsale/.local/share/common-lisp/source/")
    :  :INHERIT-CONFIGURATION)

    Also, libraries installed here will be available for every projects:
    #+begin_src lisp
      (print asdf:*central-registry*)
    #+end_src

    #+RESULTS:
    : (#P"/home/alexforsale/.local/share/quicklisp/quicklisp/")
** The basics
*** Expressions
    One of the simple /lisp/ expression that can be read, evaluated, and printed is a number. In /lisp/, anything within a parentheses is a list, for example:
    #+begin_src lisp
      (+ 2 3)
    #+end_src

    #+RESULTS:
    : 5
    is a list of three elements, the symbol =+=, and the number =2= and =3=. In general, /lisp/ evaluates lists by treating the first element as the name of the function and the rest of the elements as expressions to be evaluated to yield the arguments to the function.
* DONE Day Two
  CLOSED: [2022-03-21 Mon 15:16]
  :LOGBOOK:
  - State "DONE"       from "PROG"       [2022-03-21 Mon 15:16]
  CLOCK: [2022-03-21 Mon 14:50]--[2022-03-21 Mon 15:16] =>  0:26
  - State "PROG"       from              [2022-03-21 Mon 14:50]
  :END:
** Data Types
   In /lisp/ it's data object that are typed, not variables. Any variable can have any Lisp object as its value.[fn:1]
   Here are brief descriptions of various Common Lisp data types.
   - Numbers :: are provided in various forms and representations. Common Lisp provides a true integer data type: any integer, positive or negative, has in principle a representation as a Common Lisp data object, subject only to total memory limitations (rather than machine word width). A true rational data type is provided: the quotient of two integers, if not an integer, is a ratio. Floating-point numbers of various ranges and precisions are also provided, as well as Cartesian complex numbers.
   - Characters ::  represent printed glyphs such as letters or text formatting operations. Strings are one-dimensional arrays of characters. Common Lisp provides for a rich character set, including ways to represent characters of various type styles.
   - Symbols :: (sometimes called atomic symbols for emphasis or clarity) are named data objects. Lisp provides machinery for locating a symbol object, given its name (in the form of a string). Symbols have property lists, which in effect allow symbols to be treated as record structures with an extensible set of named components, each of which may be any Lisp object. Symbols also serve to name functions and variables within programs.
   - Lists :: are sequences represented in the form of linked cells called conses. There is a special object (the symbol nil) that is the empty list. All other lists are built recursively by adding a new element to the front of an existing list. This is done by creating a new cons, which is an object having two components called the car and the cdr. The car may hold anything, and the cdr is made to point to the previously existing list. (Conses may actually be used completely generally as two-element record structures, but their most important use is to represent lists.).
   - Arrays :: Arrays are dimensioned collections of objects. An array can have any non-negative number of dimensions and is indexed by a sequence of integers. A general array can have any Lisp object as a component; other types of arrays are specialized for efficiency and can hold only certain types of Lisp objects. It is possible for two arrays, possibly with differing dimension information, to share the same set of elements (such that modifying one array modifies the other also) by causing one to be displaced to the other. One-dimensional arrays of any kind are called vectors. One-dimensional arrays of characters are called strings. One-dimensional arrays of bits (that is, of integers whose values are 0 or 1) are called bit-vectors.
   - Hash tables :: provide an efficient way of mapping any Lisp object (a key) to an associated object.
   - Readtables :: are used to control the built-in expression parser read.
   - Packages :: collections of symbols that serve as name spaces. The parser recognizes symbols by looking up character sequences in the current package.
   - Pathnames :: represent names of files in a fairly implementation-independent manner. They are used to interface to the external file system.
   - Streams :: represent sources or sinks of data, typically characters or bytes. They are used to perform I/O, as well as for internal purposes such as parsing strings.
   - Random-states :: data structures used to encapsulate the state of the built-in random-number generator.
   - Structures :: user-defined record structures, objects that have named components. The defstruct facility is used to define new structure types. Some Common Lisp implementations may choose to implement certain system-supplied data types, such as bignums, readtables, streams, hash tables, and pathnames, as structures, but this fact will be invisible to the user.
   - Functions :: objects that can be invoked as procedures; these may take arguments and return values. (All Lisp procedures can be construed to return values and therefore every procedure is a function.) Such objects include compiled-functions (compiled code objects). Some functions are represented as a list whose car is a particular symbol such as lambda. Symbols may also be used as functions.


* Footnotes

[fn:1] https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node15.html
